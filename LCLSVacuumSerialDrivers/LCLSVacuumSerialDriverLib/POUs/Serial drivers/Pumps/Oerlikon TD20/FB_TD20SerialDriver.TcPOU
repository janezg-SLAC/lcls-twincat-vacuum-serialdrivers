<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4020.12">
  <POU Name="FB_TD20SerialDriver" Id="{e14944e4-ef76-401c-8991-59b8069ac68e}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_TD20SerialDriver
VAR_INPUT
    /// rising edge execute
    i_xExecute: BOOL;
    /// Maximum wait time for reply
    i_tTimeOut: TIME := TIME#1s0ms;
    i_wControlWord: WORD;
END_VAR
VAR_OUTPUT
    q_xDone: BOOL;
    q_xError: BOOL;
    q_xTimeout: BOOL;
    q_sResult: STRING(255);
    q_stStatus: ST_TD20Status;
    /// Last Byte Sequence Sent to Serial Device - for debugging
    q_abLastSentArray: ARRAY[0..23] OF BYTE;
    /// Last Byte Sequence Received from Serial Device - for debugging
    q_abLastReceivedArray: ARRAY[0..23] OF BYTE;
END_VAR
VAR_IN_OUT
    iq_stSerialRXBuffer: ComBuffer;
    iq_stSerialTXBuffer: ComBuffer;
END_VAR
VAR
    rtExecute: R_TRIG;
    rtTransDone: R_TRIG;
    iStep: INT;
    fbTD20Transaction: FB_TD20Transaction;
    fbFormatString: FB_FormatString;
    iCatch: INT;
    sTransactionErrMesg : STRING := 'In step %d fbTD20Transaction failed with message: %s';
    sDriverErrMesg		: STRING := 'In step %d FB_TD20SerialDriver failed with unexpected PKE reply: %X';
    i		: INT := 1;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[(* This function block performs serial transactions with a Oerlikon TD20 Pump controller *)

(* rising edge trigger *)
rtExecute(CLK:= i_xExecute);
IF rtExecute.Q  THEN
    q_xDone	:= FALSE;
    q_xError := FALSE;
    q_xTimeout := FALSE;
    q_sResult:= '';
    iStep := 10;
END_IF

CASE iStep OF
    0: (* idle *)
        ;

    10: (* assure rising edge *)
        fbTD20Transaction.i_xExecute := FALSE;
        iStep := iStep + 10;

    20:(* get P20 *)
        fbTD20Transaction.i_wPKE := 16#1000 OR 20;
        fbTD20Transaction.i_bIND := 0;
        fbTD20Transaction.i_dwPWE := 0;
        fbTD20Transaction.i_xExecute := TRUE;

        IF fbTD20Transaction.q_xError THEN
            iCatch := iCatch +1;
            a_TransactionErrorMesg();
            iStep := 9000;
        ELSIF fbTD20Transaction.q_xDone THEN
            fbTD20Transaction.i_xExecute := FALSE;
            IF fbTD20Transaction.q_wPKE = (16#1000 OR 20) THEN
                q_stStatus.wCriticalFreq_P20 := DWORD_TO_WORD(fbTD20Transaction.q_dwPWE);
                iStep := iStep + 10;
            ELSE
                a_DriverErrorMesg();
                iStep := 9100;
            END_IF
        END_IF

    30:(* get P21 *)
        fbTD20Transaction.i_wPKE := 16#1000 OR 21;
        fbTD20Transaction.i_bIND := 0;
        fbTD20Transaction.i_dwPWE := 0;
        fbTD20Transaction.i_xExecute := TRUE;
        IF fbTD20Transaction.q_xError THEN
            iCatch := iCatch +1;
            a_TransactionErrorMesg();
            iStep := 9000;
        ELSIF fbTD20Transaction.q_xDone THEN
            fbTD20Transaction.i_xExecute := FALSE;
            IF fbTD20Transaction.q_wPKE = (16#1000 OR 21) THEN
                q_stStatus.wMaxCurrentFactor_P21 := DWORD_TO_WORD(fbTD20Transaction.q_dwPWE);
                iStep := iStep + 10;
            ELSE
                a_DriverErrorMesg();
                iStep := 9100;
            END_IF
        END_IF

    40:(* get P24 *)
        fbTD20Transaction.i_wPKE := 16#1000 OR 24;
        fbTD20Transaction.i_bIND := 0;
        fbTD20Transaction.i_dwPWE := 0;
        fbTD20Transaction.i_xExecute := TRUE;
        IF fbTD20Transaction.q_xError THEN
            iCatch := iCatch +1;
            a_TransactionErrorMesg();
            iStep := 9000;
        ELSIF fbTD20Transaction.q_xDone THEN
            fbTD20Transaction.i_xExecute := FALSE;
            IF fbTD20Transaction.q_wPKE = (16#1000 OR 24) THEN
                q_stStatus.wSetpointFreq_P24 := DWORD_TO_WORD(fbTD20Transaction.q_dwPWE);
                iStep := iStep + 10;
            ELSE
                a_DriverErrorMesg();
                iStep := 9100;
            END_IF
        END_IF

    50:(* get P32 *)
        fbTD20Transaction.i_wPKE := 16#1000 OR 32;
        fbTD20Transaction.i_bIND := 0;
        fbTD20Transaction.i_dwPWE := 0;
        fbTD20Transaction.i_xExecute := TRUE;
        IF fbTD20Transaction.q_xError THEN
            iCatch := iCatch +1;
            a_TransactionErrorMesg();
            iStep := 9000;
        ELSIF fbTD20Transaction.q_xDone THEN
            fbTD20Transaction.i_xExecute := FALSE;
            IF fbTD20Transaction.q_wPKE = (16#1000 OR 32) THEN
                q_stStatus.wMaxRunUpTime_P32 := DWORD_TO_WORD(fbTD20Transaction.q_dwPWE);
                iStep := iStep + 10;
            ELSE
                a_DriverErrorMesg();
                iStep := 9100;
            END_IF
        END_IF

    60:(* get P171 index 0 *)
        fbTD20Transaction.i_wPKE := 16#6000 OR 171;
        fbTD20Transaction.i_bIND := 0;
        fbTD20Transaction.i_dwPWE := 0;
        fbTD20Transaction.i_xExecute := TRUE;
        IF fbTD20Transaction.q_xError THEN
            iCatch := iCatch +1;
            a_TransactionErrorMesg();
            iStep := 9000;
        ELSIF fbTD20Transaction.q_xDone THEN
            fbTD20Transaction.i_xExecute := FALSE;
            IF fbTD20Transaction.q_wPKE = (16#4000 OR 171) THEN
                q_stStatus.wErrorCode_P171 := DWORD_TO_WORD(fbTD20Transaction.q_dwPWE);
                iStep := 8000;
            ELSE
                a_DriverErrorMesg();
                iStep := 9100;
            END_IF
        END_IF

    8000: (* done *)
        q_xDone := TRUE;
        IF  i_xExecute = FALSE THEN
            q_xDone:= FALSE;
            iStep := 0;
        END_IF

    9000: (* Transaction Error *)
        q_xError := TRUE;

    9100: (* Driver Error *)
        q_xError := TRUE;

END_CASE

fbTD20Transaction(
    i_wControlWord:= i_wControlWord,
    i_tTimeOut:= i_tTimeOut,
    iq_stSerialRXBuffer:= iq_stSerialRXBuffer,
    iq_stSerialTXBuffer:= iq_stSerialTXBuffer,
    q_wStatusWord=> q_stStatus.wStatusWord,
    q_wFrequency_P3=>  q_stStatus.wFrequency_P3,
    q_wVoltage_P4=> q_stStatus.wVoltage_P4,
    q_wMotorCurrent_P5=> q_stStatus.wMotorCurrent_P5,
    q_wConverterTemp_P11=> q_stStatus.wConverterTemp_P11,
    q_wPumpTemp_P127=> q_stStatus.wPumpTemp_P127);

IF fbTD20Transaction.q_xError THEN
    a_ClearStatus();
END_IF

q_abLastSentArray := fbTD20Transaction.q_abLastSentArray;
q_abLastReceivedArray := fbTD20Transaction.q_abLastReceivedArray;]]></ST>
    </Implementation>
    <Action Name="a_ClearStatus" Id="{6c16b02a-21a4-42c3-be3b-7fe68103fe3d}">
      <Implementation>
        <ST><![CDATA[q_stStatus.wStatusWord := 0;
q_stStatus.wFrequency_P3 := 0;
q_stStatus.wVoltage_P4 := 0;
q_stStatus.wMotorCurrent_P5 := 0;
q_stStatus.wConverterTemp_P11 := 0;
q_stStatus.wCriticalFreq_P20 := 0;
q_stStatus.wMaxCurrentFactor_P21 := 0;
q_stStatus.wSetpointFreq_P24 := 0;
q_stStatus.wMaxRunUpTime_P32 := 0;
q_stStatus.wPumpTemp_P127 := 0;
q_stStatus.wErrorCode_P171 := 0;]]></ST>
      </Implementation>
    </Action>
    <Action Name="a_TransactionErrorMesg" Id="{85c3159b-2c46-4fb3-ba2f-294d3e451c23}">
      <Implementation>
        <ST><![CDATA[fbFormatString( sformat:=sTransactionErrMesg,
    arg1:=F_INT(iStep),
    arg2:=F_STRING(fbTD20Transaction.q_sResult),
    sOut => q_sResult);

a_ClearStatus();
q_xTimeout := fbTD20Transaction.q_xTimeout;]]></ST>
      </Implementation>
    </Action>
    <Action Name="a_DriverErrorMesg" Id="{fb85259a-79e9-4583-806b-0afe020b122f}">
      <Implementation>
        <ST><![CDATA[fbFormatString( sformat:=sDriverErrMesg,
    arg1:=F_INT(iStep),
    arg2:=F_WORD(fbTD20Transaction.q_wPKE),
    sOut => q_sResult);

a_ClearStatus();]]></ST>
      </Implementation>
    </Action>
  </POU>
</TcPlcObject>